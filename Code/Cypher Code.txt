Cypher CodeFor Loading Dataset and Performing ETL: // Create Player Nodes with segregated D.O.BLOAD CSV WITH HEADERS FROM 'file:///players.csv' AS rowMERGE (p:Player {id: row.`Player id`})SET p.name = row.Player,    p.position = row.Position,    p.number = toInteger(row.Number),    p.dob = row.`D.O.B`,    p.day = toInteger(split(row.`D.O.B`, '.')[0]),    p.month = toInteger(split(row.`D.O.B`, '.')[1]),    p.year = toInteger(split(row.`D.O.B`, '.')[2]),    p.age = toInteger(row.Age),    p.height = toInteger(row.`Height (cm)`),    p.caps = toInteger(row.Caps),    p.internationalGoals = toInteger(row.`International goals`),    p.playsInHomeCountry = row.`Plays in home country?`;// Create Club NodesLOAD CSV WITH HEADERS FROM 'file:///players.csv' AS rowMERGE (c:Club {name: row.Club})SET c.country = row.`Club (country)`;// Create Country NodesLOAD CSV WITH HEADERS FROM 'file:///players.csv' AS rowMERGE (co:Country {name: row.Country});// Create PLAYS_FOR RelationshipsLOAD CSV WITH HEADERS FROM 'file:///players.csv' AS rowMATCH (p:Player {id: row.`Player id`}), (c:Club {name: row.Club})MERGE (p)-[:PLAYS_FOR {number: toInteger(row.Number)}]->(c);// Create BORN_IN RelationshipsLOAD CSV WITH HEADERS FROM 'file:///players.csv' AS rowMATCH (p:Player {id: row.`Player id`}), (co:Country {name: row.Country})MERGE (p)-[:BORN_IN]->(co);// Create LOCATED_IN RelationshipsLOAD CSV WITH HEADERS FROM 'file:///players.csv' AS rowMATCH (c:Club {name: row.Club}), (co:Country {name: row.`Club (country)`})MERGE (c)-[:LOCATED_IN]->(co);Cypher Queries:// 1. What is the jersy number of the player with <a specific player id>?MATCH (p:Player {id: '228599'})RETURN p.number AS jerseyNumber;// 2. Which clubs are based in 'Germany'?MATCH (c:Club)-[:LOCATED_IN]->(co:Country {name: 'Germany'})RETURN c.name AS clubName;// 3. Which club does Sergio RAMOS play for?MATCH (p:Player {name: 'Sergio RAMOS'})-[:PLAYS_FOR]->(c:Club)RETURN c.name AS clubName;//4. How old is Lionel MESSI?MATCH (p:Player {name: 'Lionel MESSI'})RETURN p.age AS age;//5. In which country is the club that <a specific player> plays for?MATCH (p:Player {name: 'Rodrigo MUNOZ'})-[:PLAYS_FOR]->(c:Club)RETURN c.country AS countryName;//6. Find a club that has players from Bosnia & Herzegovina?MATCH (p:Player)-[:PLAYS_FOR]->(c:Club), (p)-[:BORN_IN]->(co:Country {name: 'Bosnia & Herzegovina'})RETURN DISTINCT c.name AS clubName;//7. Find all players play at <a specific club>, returning in ascending orders of age.MATCH (p:Player)-[:PLAYS_FOR]->(c:Club {name: 'Chelsea FC'})RETURN p.name AS playerName, p.age AS ageORDER BY p.age ASC;//8. Find all <a specific position> players in the national team of <a specific country>, returning in descending order of caps.MATCH (p:Player {position: 'Midfielder'})-[:BORN_IN]->(co:Country {name: 'Australia'})RETURN p.name AS playerName, p.caps AS capsORDER BY p.caps DESC;//9. ind all players born in <a specific year> and in the national team of <a specific country>, returning in descending order of caps.MATCH (p:Player)-[:BORN_IN]->(co:Country {name: 'Spain'})WHERE p.year = 1988RETURN p.name AS playerName, co.name AS CountryName, p.caps AS capsORDER BY p.caps DESC;// 10. Find the players that belong to the same club in the national team of <a specific country>, returning in descending order of international goals.MATCH (p:Player)-[:PLAYS_FOR]->(c:Club)<-[:PLAYS_FOR]-(teammate:Player)-[:BORN_IN]->(co:Country {name: 'Netherlands'})WHERE p <> teammateRETURN DISTINCT teammate.name AS playerName, teammate.internationalGoals AS internationalGoalsORDER BY teammate.internationalGoals DESC;//11. Count how many players are born in <a specific year>.MATCH (p:Player)WHERE p.year = 1985RETURN COUNT(p) AS playerCount;//12. Which age has the highest participation in the 2014 FIFA World Cup?MATCH (p:Player)RETURN p.age AS age, COUNT(p) AS playerCountORDER BY playerCount DESCLIMIT 1;//13. Find the path with a length of 2 or 3 between two specific clubs.MATCH path = (c1:Club {name: 'Real Madrid CF'})-[:PLAYS_FOR*1..2]-(p1:Player)-[:BORN_IN*0..1]-(co:Country)<-[:BORN_IN*0..1]-(p2:Player)-[:PLAYS_FOR*1..2]-(c2:Club {name: 'FC Barcelona'})RETURN path;This is a Length 3 Path:This matches a path involving countries and players born in those countries. It shows that players from the same country form indirect connections between clubs.// 14. Find the top 5 countries with players who have the highest average number of international goals. Return the countries and their average international goals in descending order.MATCH (p:Player)-[:BORN_IN]->(c:Country)WITH c.name AS country, AVG(p.internationalGoals) AS avgGoalsRETURN country, avgGoalsORDER BY avgGoals DESCLIMIT 5;// 15. Identify pairs of players from the same national team who play in different positions but have the closest number of caps. Return these pairs along with their positions and the difference in caps.MATCH (p1:Player)-[:BORN_IN]->(c:Country)<-[:BORN_IN]-(p2:Player)WHERE p1.position <> p2.position AND p1 <> p2WITH p1, p2, ABS(p1.caps - p2.caps) AS capsDifferenceORDER BY capsDifference ASCRETURN p1.name AS player1, p1.position AS position1, p1.caps AS caps1,p2.name AS player2, p2.position AS position2, p2.caps AS caps2,capsDifferenceLIMIT 5;Additional Queries:Additional Query-1: Find the average age of players for each club. Return the club names and the average age of their players in ascending order.MATCH (p:Player)-[:PLAYS_FOR]->(c:Club)WITH c.name AS club, AVG(p.age) AS avgAgeRETURN club, avgAgeORDER BY avgAge ASC;	Additional Query-2: Find all players who play in the same club and have the same position, returning their names and positions.MATCH (p1:Player)-[:PLAYS_FOR]->(c:Club)<-[:PLAYS_FOR]-(p2:Player)WHERE p1.position = p2.position AND p1 <> p2RETURN p1.name AS player1, p2.name AS player2, c.name AS club, p1.position AS position;Additional Query-3: Identify the average age of players for each position within each club. Return the club, position, and average age, ordered by club and position.MATCH (p:Player)-[:PLAYS_FOR]->(c:Club)WITH c.name AS club, p.position AS position, AVG(p.age) AS avgAgeRETURN club, position, avgAgeORDER BY club, position;Additional Query-4: Find the player pairs who have played together in the same club and are also in the same national team. Return their names, club, and country.MATCH (p1:Player)-[:PLAYS_FOR]->(c:Club)<-[:PLAYS_FOR]-(p2:Player),(p1)-[:BORN_IN]->(co:Country)<-[:BORN_IN]-(p2)WHERE p1 <> p2RETURN p1.name AS player1, p2.name AS player2, c.name AS club, co.name AS country;